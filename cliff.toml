# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Graphyne Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/vultr/graphyne
{%- endmacro -%}

{% macro print_commit(commit) -%}
    {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | split(pat="\n") | first | upper_first }} \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/-/commit/{{ commit.id }}))
{% endmacro -%}

{%- if version %}
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/-/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
        ({{ self::remote_url() }}/-/commits/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}
{% else %}\
    ## [unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}\
    {% for commit in commits %}\
      - {{ group | striptags }} {{ self::print_commit(commit=commit) }}\
    {% endfor -%}
{% endfor %}
"""

# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path
output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },

  # Strip conventional commit prefix that wrap a JIRA ticket: Changes "fix(CORE-1234): Bug fix" to "CORE-1234 Bug fix"
  { pattern = "\\w+\\(([A-Z]+-[0-9]+)\\)[: -]*", replace = "$1 " },

  # Standardize commit messages that are prefixed with a JIRA ticket
  { pattern = "([A-Z]+-[0-9]+)([: -]+)", replace = "${1} " },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^Merge", skip = true },
  { message = "^chore", skip = true },

  # Changing the order of the items below will determine the order they are processed (first match wins)
  { message = "(?i)feat", group = "<!-- 0 -->⛰️" },
  { message = "(?i)security|audit|RUSTSEC|advisory", group = "<!-- 0 -->🛡️" },
  { body = "(?i).*security", group = "<!-- 0 -->🛡️" },
  { message = "(?i)revert", group = "<!-- 0 -->↩️" },
  { message = "(?i)refactor|lint|clippy", group = "<!-- 0 -->🚜" },
  { message = "(?i)test|coverage", group = "<!-- 0 -->🧪" },
  { message = "(?i)\\<ci\\>|gitlab", group = "<!-- 0 -->🦊" },
  { message = "(?i)dependenc(y|ies)|package|rust|cargo|crate|bump.*rust", group = "<!-- 0 -->📦" },
  { message = "(?i)doc", group = "<!-- 0 -->📚" },
  { message = "(?i)perf", group = "<!-- 0 -->🏎️" },
  { message = "(?i)style", group = "<!-- 0 -->🎨" },
  { message = "(?i)fix", group = "<!-- 0 -->🐛" },
  { message = ".*", group = "<!-- 0 -->🏗️" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# Include only the tags that belong to the current branch.
use_branch_tags = false
